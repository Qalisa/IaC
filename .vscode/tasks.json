{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "inputs": [
        {
            "id": "nsToDelete",
            "description": "Please input the namespace to delete",
            "default": "",
            "type": "promptString"
        },
        {
            "id": "helmPackage",
            "description": "Please input the helm installation to remove",
            "default": "",
            "type": "promptString"
        },
        {
            "id": "helmNamespace",
            "description": "Please input the namespace to remove the helm installation from",
            "default": "",
            "type": "promptString"
        },
        {
            "id": "imageToPull",
            "description": "Registry path (like \"harbor-core.harbor/<org>/<image>:<tag>\")",
            "default": "",
            "type": "promptString"
        }
    ],
    "tasks": [
        {
            "label": "üëÆ‚Äç‚ôÄÔ∏è k8s: Delete namespace",
            "type": "shell",
            "command": [
                "kubectl delete namespace ${input:nsToDelete}"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        {
            "label": "üëÆ‚Äç‚ôÄÔ∏è helm: Uninstall",
            "type": "shell",
            "command": [
                "helm uninstall ${input:helmPackage} -n ${input:helmNamespace}"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        {
            "label": "üëÆ‚Äç‚ôÄÔ∏è k3s: DELETE !!!",
            "type": "shell",
            "command": [
                "ansible-playbook",
                "-i ansible/inventories/production/hosts.yaml",
                "ansible/playbooks/_reset.yml"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        {
            "label": "Try to pull from private registry",
            "detail": "Helps debugging registry auth issues",
            "type": "shell",
            "command": [
                "systemctl restart containerd && crictl -r /run/containerd/containerd.sock pull ${input:imageToPull}"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        //
        //
        //
        {
            "label": "‚úÖ CF Zero-Trust: apply application policies",
            "type": "shell",
            "command": [
                "ansible-playbook",
                "-i ansible/inventories/production/hosts.yaml",
                "ansible/playbooks/_.site.services.yml",
                "--tags", "zto-app"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        {
            "label": "‚úÖ Kyverno: apply policies",
            "type": "shell",
            "command": [
                "ansible-playbook",
                "-i ansible/inventories/production/hosts.yaml",
                "ansible/playbooks/_.site.services.yml",
                "--tags", "kyverno-policy"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        {
            "label": "‚úÖ ArgoCD: Install Applications",
            "type": "shell",
            "command": [
                "ansible-playbook",
                "-i ansible/inventories/production/hosts.yaml",
                "ansible/playbooks/_.site.services.yml",
                "--tags", "argocd-apps"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        //
        //
        //
        {
            "label": "üîì Hachicorp Vault: Unseal",
            "type": "shell",
            "command": [
                "ansible-playbook",
                "-i ansible/inventories/production/hosts.yaml",
                "ansible/playbooks/_unseal-vault.yml",
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        {
            "label": "‚úÖ mailserver: Ensure Mail Accounts Folder Permissions",
            "type": "shell",
            "command": [
                "ansible-playbook",
                "-i ansible/inventories/production/hosts.yaml",
                "ansible/playbooks/_mail-ensure-permissions.yml"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        {
            "label": "‚úÖ OpenLDAP: List Users",
            "type": "shell",
            "command": [
                "ansible-playbook",
                "-i ansible/inventories/production/hosts.yaml",
                "ansible/playbooks/_ldap_list_users.yml"
            ],
            "options": {
                "env": {
                    "ANSIBLE_DISPLAY_OK_HOSTS": "1"
                },
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        //
        //
        //
        {
            "label": "üöÄ Install: K3s",
            "type": "shell",
            "command": [
                "ansible-playbook",
                "-i ansible/inventories/production/hosts.yaml",
                "--vault-password-file .ansible-vault-pw",
                "--become --become-user=root",
                "ansible/playbooks/site.k3s.yml"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        {
            "label": "Ensure services playbook exists",
            "type": "shell",
            "command": "[ ! -f site.services.yml ] && cp -p _.site.services.yml site.services.yml || true",
            "options": {
                "cwd": "${workspaceFolder}/ansible/playbooks",
                "statusbar": {
                    "hide": true
                },
            }
        },
        {
            "label": "üöÄ Install: Services",
            "dependsOn": "Ensure services playbook exists",
            "type": "shell",
            "command": [
                "ansible-playbook",
                "-i ansible/inventories/production/hosts.yaml",
                "--vault-password-file .ansible-vault-pw",
                "--become --become-user=root",
                "ansible/playbooks/site.services.yml"
            ],
            "problemMatcher": []
        },
        ///
        ///
        ///
        {
            "label": "üîì Ansible Vault: Decrypt",
            "type": "shell",
            "command": [
                "ansible-vault",
                "decrypt",
                "ansible/inventories/production/group_vars/all/vault",
                "--vault-password-file .ansible-vault-pw"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        {
            "label": "üîí Ansible Vault: Encrypt",
            "type": "shell",
            "command": [
                "ansible-vault",
                "encrypt",
                "ansible/inventories/production/group_vars/all/vault",
                "--vault-password-file .ansible-vault-pw"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        //
        //
        //

        {
            "label": "üß∂ Lint: Autofix whole project",
            "type": "shell",
            "command": "ansible-lint  --fix"
        },

        {
            "label": "üê∂ Run K9s",
            "type": "shell",
            "command": "k9s",
            "options": {
                "env": {
                    "EDITOR": "nano"
                }
            }
        },
        ///
        ///
        ///
        {
            "label": "‚õè1. Install Ansible & tools",
            "type": "shell",
            "command": [
                //
                "python3 -m pip install --break-system-packages --user pipx", "&&",
                "python3 -m pipx ensurepath", "&&",
                "python3 -m pipx ensurepath --global", "&&", // requires implicit "sudo" !! please be logged as root !!
                //
                "python3 -m pipx install --include-deps ansible", "&&",
                "python3 -m pipx install --include-deps ansible-dev-tools"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        {
            "label": "‚õè2a. Install IaC requirements",
            "type": "shell",
            "command": "ansible-galaxy collection install --force -r ansible/requirements.yml",
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
        {
            "label": "‚õè2b. Upgrade IaC requirements",
            "type": "shell",
            "command": [
                "pipx upgrade --include-injected ansible", "&&",
                "pipx upgrade --include-injected ansible-dev-tools", "&&",
                "ansible-galaxy collection install --force -U -r ansible/requirements.yml"
            ],
            "options": {
                "statusbar": {
                    "hide": true
                }
            },
            "problemMatcher": []
        },
    ]
}