- name: Structure server definition as JSON
  block:
    - name: Check mandatory variables are defined
      ansible.builtin.assert:
        that:
          - utilities__pgadmin__add_server_definition__id is defined
          - utilities__pgadmin__add_server_definition__name is defined
          - utilities__pgadmin__add_server_definition__group is defined
          - utilities__pgadmin__add_server_definition__port is defined
          - utilities__pgadmin__add_server_definition__username is defined
          - utilities__pgadmin__add_server_definition__host is defined
          - utilities__pgadmin__add_server_definition__sslmode is defined
          - utilities__pgadmin__add_server_definition__maintenance_db is defined
          - utilities__pgadmin__add_server_definition__passfile is defined
    - name: Define new server configuration using defaults/main.yml variables
      ansible.builtin.set_fact:
        new_server_definition:
          Name: "{{ utilities__pgadmin__add_server_definition__name }}"
          Group: "{{ utilities__pgadmin__add_server_definition__group }}"
          Port: "{{ utilities__pgadmin__add_server_definition__port }}"
          Username: "{{ utilities__pgadmin__add_server_definition__username }}"
          Host: "{{ utilities__pgadmin__add_server_definition__host }}"
          SSLMode: "{{ utilities__pgadmin__add_server_definition__sslmode }}"
          MaintenanceDB: "{{ utilities__pgadmin__add_server_definition__maintenance_db }}"
          PassFile: "{{ utilities__pgadmin__add_server_definition__passfile }}"
    - name: Add ID
      ansible.builtin.set_fact:
        new_server_definition: "{'{{ utilities__pgadmin__add_server_definition__id }}':{{ new_server_definition | to_json }}}"

##
##
##

- name: Updating existing Secret with server definitions
  block:
    - name: Fetch existing Secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: "{{ pgadmin__serverdef_secret_name }}"
        namespace: "{{ pgadmin__namespace }}"
      register: secret_info
    - name: Extract existing servers.json
      ansible.builtin.set_fact:
        existing_servers: "{{ secret_info.resources[0].data['servers.json'] | b64decode | from_json }}"
    - name: Merge new server into existing servers
      ansible.builtin.set_fact:
        updated_servers: >-
          {{
            existing_servers | combine({
              'Servers': existing_servers.Servers | combine(new_server_definition)
            })
          }}
    # Kind of useless (https://github.com/Qalisa/IaC/issues/28)
    - name: Update the Secret with the new servers.json
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ pgadmin__serverdef_secret_name }}"
            namespace: "{{ pgadmin__namespace }}"
          type: Opaque
          stringData:
            servers.json: "{{ updated_servers | to_json }}"

##
##
##

- name: Persisting password through pgpass
  block:
    - name: Ensure .pgpass file exists with correct permissions
      ansible.builtin.file:
        path: "{{ utilities__pgadmin__add_server_definition__passfile }}"
        state: touch
        mode: "0600"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
    - name: Insert or update authentication entry in .pgpass file
      ansible.builtin.lineinfile:
        path: "{{ utilities__pgadmin__add_server_definition__passfile }}"
        regexp: "^{{ host }}:{{ port }}:{{ database }}:.*"
        line: "{{ host }}:{{ port }}:{{ database }}:{{ user }}:{{ password }}"
        create: true
        mode: "0600"
      no_log: true

##
##
##

- name: Updating server definitions
  block:
    - name: Get pgadmin pod
      until: >
        pod_search.resources is defined and
        pod_search.resources | length > 0 and
        pod_search.resources[0].status.phase == "Running"
      retries: 20
      delay: 5
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ pgadmin__namespace }}"
        label_selectors:
          - app.kubernetes.io/name=pgadmin4
      register: pod_search
    - name: Update DB with commands
      vars:
        dest: /tmp/servers.json
      loop:
        - command: bash -c "echo {{ updated_servers | to_json | b64encode }} | base64 -d > {{ dest }}"
          descr: Create tmp JSON file
        - command: /venv/bin/python /pgadmin4/setup.py load-servers --user {{ pgadmin__username_email }} --auth-source internal --replace {{ dest }}
          descr: Update servers list
        - command: rm {{ dest }}
          descr: Remove tmp JSON file
      loop_control:
        label: "{{ item.descr }}"
      kubernetes.core.k8s_exec:
        namespace: "{{ pgadmin__namespace }}"
        pod: "{{ pod_search.resources[0].metadata.name }}"
        command: "{{ item.command }}"
