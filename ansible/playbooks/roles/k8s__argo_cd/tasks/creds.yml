---
- name: Extract "admin" user's password
  tags: [creds]
  block:
    - name: Search for pod exact name
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - app.kubernetes.io/name = argocd-server
      register: pod_name_search
    - name: Argocd autogenerated initial password
      kubernetes.core.k8s_exec:
        namespace: argocd
        pod: "{{ pod_name_search.resources[0].metadata.name }}"
        command: argocd admin initial-password -n argocd
      register: argocd_init_admin_pwd
    - name: Make sure destination dir exists
      ansible.builtin.file:
        path: "{{ iac__generated_creds_dir }}"
        state: directory
        mode: "0775"
    - name: Save password
      ansible.builtin.copy:
        content: "{{ argocd_init_admin_pwd.stdout_lines[0] }}"
        dest: "{{ k8s__argo_cd_admin_pwd_path }}"
        mode: "0775"

#
- name: Login as "admin" user
  tags: [creds]
  block:
    - name: Read keys as raw bytes
      ansible.builtin.slurp:
        src: "{{ k8s__argo_cd_admin_pwd_path }}"
      register: admin_pwd
    - name: Get ArgoCD authentication token
      ansible.builtin.uri:
        url: "{{ k8s__argo_cd_cluster_api_url }}/session"
        validate_certs: false
        method: POST
        body_format: json
        body:
          username: "admin"
          password: "{{ admin_pwd.content | b64decode }}"
      register: argocd_auth_response
    - name: Define "admin" session token
      ansible.builtin.set_fact:
        admin_bearer: "{{ argocd_auth_response.json.token }}"

##
- name: Generate tokens into files
  tags: [creds]
  ansible.builtin.include_tasks: _helper.generate-token.yml
  vars:
    bearer: "{{ admin_bearer }}"
  loop:
    - username: "{{ argocd__account_for__github_syncer }}"
    - username: "{{ argocd__account_for__argo_watcher }}"

#
- name: Add Github repository creds to ArgoCD
  tags: [creds]
  ansible.builtin.uri:
    url: "{{ k8s__argo_cd_cluster_api_url }}/repocreds"
    validate_certs: false
    method: POST
    headers:
      Authorization: "Bearer {{ admin_bearer }}"
      Content-Type: "application/json"
    body_format: json
    body:
      type: "git"
      url: "{{ iac__github_org_url }}"
      githubAppID: "{{ argocd__github_app__app_id | int }}" # requires int
      githubAppInstallationID: "{{ argocd__github_app__installation_id }}"
      githubAppPrivateKey: "{{ argocd__github_app__priv_key }}"
