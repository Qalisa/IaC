---
##
## Await for listmonk to create database
##

- name: Wait for pod to become ready
  ansible.builtin.command: |
    kubectl wait
    pods -l app={{ k8s__listmonk__app_name }}
    --namespace={{ k8s__listmonk__namespace }}
    --for=condition=Ready
    --timeout=240s
  register: pods_ready
  changed_when: pods_ready.rc != 0

##
## Create API user
##

- name: Install prerequisites to use "community.postgresql.postgresql_query"
  ansible.builtin.apt:
    state: present
    update_cache: true
    package:
      - postgresql
      - libpq-dev
      - python3-psycopg2

- name: Create API User
  community.postgresql.postgresql_query:
    db: "{{ k8s__listmonk__db__dbname }}"
    login_user: "{{ k8s__listmonk__db__user }}"
    login_password: "{{ k8s__listmonk__db__password }}"
    login_host: "{{ k8s__listmonk__internal_hostname__db }}"
    login_port: "{{ k8s__listmonk__db__port }}"
    positional_args:
      - "{{ k8s__listmonk__admin_api__username }}"
      - "{{ k8s__listmonk__admin_api__password }}"
      - "{{ k8s__listmonk__admin_api__username }}@listmonk"
      - Admin API
    query: >
      INSERT INTO users (username, password_login, password, email, name, type, user_role_id, list_role_id, status)
      VALUES(%s, false, %s, %s, %s, 'api', 1, NULL, 'enabled')
      ON CONFLICT (username) DO NOTHING;

##
## Requires restarting for listmonk to ack
##

- name: Sundown listmonk
  kubernetes.core.k8s_scale:
    api_version: v1
    kind: Deployment
    name: "{{ k8s__listmonk__app_name }}"
    namespace: "{{ k8s__listmonk__namespace }}"
    replicas: 0
    wait: true

- name: Reset listmonk
  kubernetes.core.k8s_scale:
    api_version: v1
    kind: Deployment
    name: "{{ k8s__listmonk__app_name }}"
    namespace: "{{ k8s__listmonk__namespace }}"
    replicas: 1
    wait: true

##
## Set configuration
##

- name: Update settings
  ansible.builtin.uri:
    url: "{{ k8s__listmonk__api_url_part }}/settings"
    force_basic_auth: true
    return_content: true
    user: "{{ k8s__listmonk__admin_api__username }}"
    password: "{{ k8s__listmonk__admin_api__password }}"
    validate_certs: false
    method: PUT
    headers:
      Content-Type: "application/json"
    body_format: json
    body:
      # app
      app.lang: "{{ iac__prefered_lang__sub }}"
      app.root_url: https://{{ k8s__listmonk__external_hostname }}
      app.site_name: "{{ listmonk__site_name }}"
      app.logo_url: "{{ listmonk__logo_url }}"
      app.favicon_url: "{{ listmonk__favicon_url }}"
      app.from_email: "{{ listmonk__from_email }}"
      app.enable_public_subscription_page: true
      app.enable_public_archive: true
      app.send_optin_confirmation: true
      app.check_updates: true
      # performance
      app.batch_size: 1000
      app.concurrency: 10
      app.max_send_errors: 1000
      app.message_rate: 10
      # upload
      upload.provider: filesystem
      upload.filesystem.upload_path: uploads
      upload.filesystem.upload_uri: /uploads
      upload.extensions: [".*", ".png"]
      # privacy
      privacy.unsubscribe_header: true
      privacy.allow_blocklist: true
      privacy.allow_preferences: true
      privacy.allow_export: true
      privacy.allow_wipe: true
      #
      # bounce.enabled: false
      # bounce.webhooks_enabled: true
      # bounce.actions.soft.count: 1
      # bounce.actions.soft.action: "none"
      # bounce.actions.hard.count: 1
      # bounce.actions.hard.action: "none"
      # bounce.actions.complaint.count: 1
      # bounce.actions.complaint.action: "none"
      # bounce.ses_enabled: false
      # bounce.sendgrid_enabled: false
      # bounce.sendgrid_key: ""
      # bounce.postmark.enabled: false
      # bounce.postmark.username: ""
      # bounce.postmark.password: ""
      # bounce.mailboxes: []
      #
      smtp:
        - uuid: ""
          enabled: true
          port: "{{ docker_mailserver__internal_smtp_preferred_port }}"
          host: "{{ docker_mailserver__internal_smtp_server }}"
          hello_hostname: "{{ docker_mailserver__external_hostname }}"
          auth_protocol: login
          tls_type: STARTTLS
          tls_skip_verify: true
          max_conns: 10
          max_msg_retries: 2
          idle_timeout: 15s
          wait_timeout: 5s
          username: "{{ iac__donotreply_username }}"
          password: "{{ iac__donotreply_password }}"
          toEmail: "{{ iac__donotreply_email }}"
          email_headers: []
