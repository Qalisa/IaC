---
- name: Create Persistent Volume dir path
  ansible.builtin.file:
    path: "{{ registry_pv_path }}"
    state: directory
    mode: '0755'

- name: Prepare image registry
  kubernetes.core.k8s:
    state: present
    template:
      - path: 'templates/pv.yml.j2'
      - path: 'templates/sc.yml.j2'

#
#
#

- name: Add stable chart repo
  kubernetes.core.helm_repository:
    name: joxit
    repo_url: https://helm.joxit.dev

- name: Install passlib
  ansible.builtin.pip:
    name: passlib

- name: Add a user to a password file and ensure permissions are set
  community.general.htpasswd:
    path: /tmp/registry_ui
    name: "{{ registry_ui_username }}"
    password: "{{ registry_ui_password }}"

- name: Load password
  block:
    - name: Read as raw bytes
      ansible.builtin.slurp:
        src: /tmp/registry_ui
      register: registry_ui_keypair
    - name: Load facts
      ansible.builtin.set_fact:
        registry_ui_pwdpair_crypt: "{{ registry_ui_keypair.content | b64decode | trim }}"
      when: registry_ui_keypair is not failed

- name: Add secret
  kubernetes.core.k8s:
    state: present
    template:
      - path: 'templates/secret.yml.j2'

- name: Install docker registry ui w/ Helm
  kubernetes.core.helm:
    name: docker-registry-ui
    chart_ref: joxit/docker-registry-ui
    release_namespace: kube-system
    values:
      global:
        name: registry # prefix applied to all manfests objects names
      ui:
        dockerRegistryUrl: http://registry.kube-system:5000
        deleteImages: true
        proxy: true
        service:
          type: LoadBalancer
        ingress:
          enabled: true
          host:	registry.{{ root_domain }}
          ingressClassName: "{{ ingress_nginx_class }}"
          tls:
            - hosts:
              #  - "*.{{ root_domain }}"
              # secretName: nw-wildcard-certs
                - "registry.{{ root_domain }}"
              secretName: registry-ui-certs
          annotations:
            # when using Cloudflare's proxied DNS record
            nginx.ingress.kubernetes.io/ssl-redirect: "false"
            cert-manager.io/cluster-issuer: "selfsigned" # "{{ cluster_issuer_name }}"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
            ###
            # # type of authentication
            nginx.ingress.kubernetes.io/auth-type: basic
            # name of the secret that contains the user/password definitions
            nginx.ingress.kubernetes.io/auth-secret: basic-auth
            # message to display with an appropriate context why the authentication is required
            nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
