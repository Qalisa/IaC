---
- name: Create dir path
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: "0755"

- name: Check if daemon.json exists
  ansible.builtin.stat:
    path: /etc/docker/daemon.json
  register: daemon_json_stat

- name: Read existing daemon.json if it exists
  when: daemon_json_stat.stat.exists
  ansible.builtin.slurp:
    src: /etc/docker/daemon.json
  register: daemon_json

- name: Set existing configuration to empty if daemon.json does not exist
  when: not daemon_json_stat.stat.exists
  ansible.builtin.set_fact:
    current_daemon_config: {}

- name: Load existing daemon.json content if it exists
  when: daemon_json_stat.stat.exists
  ansible.builtin.set_fact:
    current_daemon_config: "{{ daemon_json['content'] | b64decode | from_json }}"

- name: Define new configuration
  ansible.builtin.set_fact:
    new_daemon_config:
      insecure-registries:
        - "{{ registry_host }}"

- name: Combine new configuration with existing configuration
  ansible.builtin.set_fact:
    updated_daemon_config: "{{ current_daemon_config | combine(new_daemon_config, recursive=True) }}"

- name: Write updated daemon.json back to file
  ansible.builtin.copy:
    content: "{{ updated_daemon_config | to_nice_json }}"
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: '0644'

- name: Write updated daemon.json back to file
  ansible.builtin.copy:
    content: "{{ updated_daemon_config | to_nice_json }}"
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: '0644'

- name: Restart Docker
  ansible.builtin.service:
    name: docker
    state: restarted

##
##
##

- name: Create dir path
  ansible.builtin.file:
    path: /etc/containerd/certs.d/{{ registry_host }}
    state: directory
    mode: "0755"

- name: Write as overriding ssl checks for containerd
  ansible.builtin.template:
    src: templates/hosts.toml.j2
    dest: /etc/containerd/certs.d/{{ registry_host }}/hosts.toml
    owner: root
    group: root
    mode: '0644'

- name: Restart containerd
  ansible.builtin.service:
    name: containerd
    state: restarted
