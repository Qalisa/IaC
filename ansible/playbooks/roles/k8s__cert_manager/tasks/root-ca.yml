---
- name: Update NS so we allow bundle to expose secrets within it
  kubernetes.core.k8s:
    state: present
    template:
      - path: templates/ns.yml.j2

- name: Wait for pod to become ready
  ansible.builtin.command: |
    kubectl wait
    pods -l app.kubernetes.io/name=trust-manager
    --namespace={{ cert_manager__namespace }}
    --for=condition=Ready
    --timeout=120s
  register: pods_ready
  changed_when: pods_ready.rc != 0

#
- name: Generate Root CA's Bundle
  kubernetes.core.k8s:
    state: present
    template:
      - path: templates/ca-bundles/defaults-with-root-ca.yml.j2

#
# Install Org's Root CA
#

# might be extensively long depending on Issuer
- name: Wait for the associated secret to be generated
  ansible.builtin.command: kubectl get secret {{ cert_manager__org__root_ca__bundle }} -n {{ cert_manager__namespace }}
  register: secret_status
  changed_when: secret_status.rc != 0
  until: secret_status.rc == 0
  retries: 20
  delay: 20

#
- name: Install prerequisites
  ansible.builtin.apt:
    name: ca-certificates
    state: present
    update_cache: true

- name: Fetch the Kubernetes Secret
  kubernetes.core.k8s_info:
    kind: Secret
    name: "{{ cert_manager__org__root_ca__bundle }}"
    namespace: "{{ cert_manager__namespace }}"
  register: secret_info

- name: Extract and decode the certificate
  ansible.builtin.set_fact:
    certificate: "{{ secret_info.resources[0].data['ca.crt'] | b64decode }}"

- name: Ensure /usr/local/share/ca-certificates directory exists
  ansible.builtin.file:
    path: /usr/local/share/ca-certificates
    state: directory
    mode: '0755'

- name: Save the certificate to /usr/local/share/ca-certificates
  ansible.builtin.copy:
    content: "{{ certificate }}"
    dest: "{{ cert_dest }}"
    mode: '0755'

- name: Update CA certificates
  changed_when: updated.rc != 0
  register: updated
  ansible.builtin.command: update-ca-certificates
